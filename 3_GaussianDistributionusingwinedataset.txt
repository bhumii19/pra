#Design a statistical model to analyze wine quality using Gaussian distribution methods. Utilize synthetic data generated with NumPy or the Wine Quality Dataset

# 1. Import Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from scipy.stats import norm

# 2. Load Wine Quality Dataset
# Red wine dataset from UCI (commonly used)
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df = pd.read_csv(url, sep=';')

print("Shape of dataset:", df.shape)
print("\nFirst 5 rows:\n", df.head())

# 3. EDA: Check nulls and target distribution
print("\nMissing values:\n", df.isnull().sum())

# Distribution of quality scores
plt.figure(figsize=(8, 4))
sns.countplot(x='quality', data=df)
plt.title("Wine Quality Distribution")
plt.show()

# 4. EDA: Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# 5. EDA: Gaussian Fit for one feature
feature = 'alcohol'
plt.figure(figsize=(8, 4))
sns.histplot(df[feature], kde=True, stat="density", bins=30)
mean, std = df[feature].mean(), df[feature].std()
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mean, std)
plt.plot(x, p, 'k', linewidth=2)
plt.title(f"Gaussian Fit - {feature}")
plt.show()

# 6. Preprocess: Convert quality to binary (good: 7+, bad: <7)
df['quality_label'] = df['quality'].apply(lambda x: 1 if x >= 7 else 0)

# Feature-target split
X = df.drop(['quality', 'quality_label'], axis=1)
y = df['quality_label']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 7. Gaussian Naive Bayes Classifier
model = GaussianNB()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# 8. Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()
